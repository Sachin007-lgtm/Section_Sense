import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Separator } from '@/components/ui/separator';
import { 
  Lightbulb, 
  BookOpen, 
  AlertCircle, 
  Clock, 
  Brain,
  CheckCircle,
  X,
  Copy
} from 'lucide-react';
import { useState } from 'react';
import { useToast } from '@/hooks/use-toast';

interface ExplanationResponse {
  section_code: string;
  section_title: string;
  plain_language_explanation: string;
  key_points: string[];
  real_world_example?: string;
  when_applies?: string;
  punishment_explanation?: string;
  related_concepts: string[];
  confidence_score: number;
  generated_at: string;
  llm_model_used?: string;
}

interface ExplanationDisplayProps {
  explanation: ExplanationResponse;
  onClose: () => void;
}

const ExplanationDisplay = ({ explanation, onClose }: ExplanationDisplayProps) => {
  const { toast } = useToast();

  const copyToClipboard = async (text: string, label: string) => {
    try {
      await navigator.clipboard.writeText(text);
      toast({
        title: "Copied to clipboard",
        description: `${label} has been copied to your clipboard.`,
      });
    } catch (err) {
      toast({
        title: "Copy failed",
        description: "Could not copy to clipboard. Please try again.",
        variant: "destructive",
      });
    }
  };

  const formatExplanationText = () => {
    return `Section ${explanation.section_code} - Simple Explanation

${explanation.plain_language_explanation}

Key Points:
${explanation.key_points.map((point, index) => `${index + 1}. ${point}`).join('\n')}

${explanation.when_applies ? `When it applies: ${explanation.when_applies}\n` : ''}
${explanation.real_world_example ? `Real-world example: ${explanation.real_world_example}\n` : ''}
${explanation.punishment_explanation ? `Punishment: ${explanation.punishment_explanation}\n` : ''}

Related concepts: ${explanation.related_concepts.join(', ')}

Generated by: ${explanation.llm_model_used || 'AI Assistant'}`;
  };

  const getConfidenceColor = (score: number) => {
    if (score >= 0.8) return 'text-green-600 bg-green-50 border-green-200';
    if (score >= 0.6) return 'text-yellow-600 bg-yellow-50 border-yellow-200';
    return 'text-orange-600 bg-orange-50 border-orange-200';
  };

  const getConfidenceLabel = (score: number) => {
    if (score >= 0.8) return 'High Confidence';
    if (score >= 0.6) return 'Medium Confidence';
    return 'Low Confidence';
  };

  return (
    <Card className="border-primary/20 bg-gradient-to-br from-blue-50/50 to-indigo-50/50 dark:from-blue-950/20 dark:to-indigo-950/20">
      <CardHeader className="pb-4">
        <div className="flex items-start justify-between">
          <div className="flex items-center gap-2">
            <div className="p-2 bg-blue-100 dark:bg-blue-900 rounded-lg">
              <Brain className="h-5 w-5 text-blue-600 dark:text-blue-400" />
            </div>
            <div>
              <CardTitle className="text-lg font-semibold flex items-center gap-2">
                <Lightbulb className="h-5 w-5 text-amber-500" />
                Simple Explanation
              </CardTitle>
              <CardDescription>
                AI-generated plain-language explanation for Section {explanation.section_code}
              </CardDescription>
            </div>
          </div>
          <div className="flex items-center gap-2">
            <Badge className={`text-xs ${getConfidenceColor(explanation.confidence_score)}`}>
              <CheckCircle className="h-3 w-3 mr-1" />
              {getConfidenceLabel(explanation.confidence_score)}
            </Badge>
            <Button
              variant="ghost"
              size="sm"
              onClick={onClose}
              className="h-8 w-8 p-0"
            >
              <X className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </CardHeader>

      <CardContent className="space-y-4">
        {/* Main Explanation */}
        <div className="bg-white/60 dark:bg-gray-800/60 rounded-lg p-4 border">
          <h4 className="font-medium text-sm text-muted-foreground mb-2 flex items-center">
            <BookOpen className="h-4 w-4 mr-1" />
            What this section means in simple terms:
          </h4>
          <p className="text-foreground leading-relaxed">
            {explanation.plain_language_explanation}
          </p>
        </div>

        {/* Key Points */}
        {explanation.key_points.length > 0 && (
          <div className="bg-white/60 dark:bg-gray-800/60 rounded-lg p-4 border">
            <h4 className="font-medium text-sm text-muted-foreground mb-3 flex items-center">
              <CheckCircle className="h-4 w-4 mr-1" />
              Key Points to Remember:
            </h4>
            <ul className="space-y-2">
              {explanation.key_points.map((point, index) => (
                <li key={index} className="flex items-start gap-2 text-sm">
                  <span className="w-5 h-5 bg-primary/10 text-primary rounded-full flex items-center justify-center text-xs font-medium mt-0.5 flex-shrink-0">
                    {index + 1}
                  </span>
                  <span className="text-foreground">{point}</span>
                </li>
              ))}
            </ul>
          </div>
        )}

        {/* When it applies */}
        {explanation.when_applies && (
          <div className="bg-amber-50/60 dark:bg-amber-900/20 rounded-lg p-4 border border-amber-200/60">
            <h4 className="font-medium text-sm text-amber-800 dark:text-amber-300 mb-2 flex items-center">
              <AlertCircle className="h-4 w-4 mr-1" />
              When does this section apply?
            </h4>
            <p className="text-amber-900 dark:text-amber-100 text-sm leading-relaxed">
              {explanation.when_applies}
            </p>
          </div>
        )}

        {/* Real-world example */}
        {explanation.real_world_example && (
          <div className="bg-green-50/60 dark:bg-green-900/20 rounded-lg p-4 border border-green-200/60">
            <h4 className="font-medium text-sm text-green-800 dark:text-green-300 mb-2 flex items-center">
              <Lightbulb className="h-4 w-4 mr-1" />
              Real-world example:
            </h4>
            <p className="text-green-900 dark:text-green-100 text-sm leading-relaxed">
              {explanation.real_world_example}
            </p>
          </div>
        )}

        {/* Punishment explanation */}
        {explanation.punishment_explanation && (
          <div className="bg-red-50/60 dark:bg-red-900/20 rounded-lg p-4 border border-red-200/60">
            <h4 className="font-medium text-sm text-red-800 dark:text-red-300 mb-2 flex items-center">
              <AlertCircle className="h-4 w-4 mr-1" />
              Punishment in simple terms:
            </h4>
            <p className="text-red-900 dark:text-red-100 text-sm leading-relaxed">
              {explanation.punishment_explanation}
            </p>
          </div>
        )}

        {/* Related concepts */}
        {explanation.related_concepts.length > 0 && (
          <div>
            <h4 className="font-medium text-sm text-muted-foreground mb-2">
              Related concepts:
            </h4>
            <div className="flex flex-wrap gap-2">
              {explanation.related_concepts.map((concept, index) => (
                <Badge key={index} variant="outline" className="text-xs">
                  {concept}
                </Badge>
              ))}
            </div>
          </div>
        )}

        <Separator />

        {/* Footer with metadata and copy button */}
        <div className="flex items-center justify-between text-xs text-muted-foreground">
          <div className="flex items-center gap-4">
            <span className="flex items-center gap-1">
              <Clock className="h-3 w-3" />
              Generated {new Date(explanation.generated_at).toLocaleString()}
            </span>
            {explanation.llm_model_used && (
              <span className="flex items-center gap-1">
                <Brain className="h-3 w-3" />
                {explanation.llm_model_used}
              </span>
            )}
          </div>
          <Button
            variant="ghost"
            size="sm"
            onClick={() => copyToClipboard(formatExplanationText(), 'Explanation')}
            className="h-7 px-2 text-xs"
          >
            <Copy className="h-3 w-3 mr-1" />
            Copy
          </Button>
        </div>

        {/* Disclaimer */}
        <div className="bg-gray-50/60 dark:bg-gray-800/60 rounded-lg p-3 border">
          <p className="text-xs text-muted-foreground flex items-start gap-2">
            <AlertCircle className="h-3 w-3 mt-0.5 flex-shrink-0" />
            This is an AI-generated explanation for educational purposes. Please consult with a legal professional for official legal advice.
          </p>
        </div>
      </CardContent>
    </Card>
  );
};

export default ExplanationDisplay;